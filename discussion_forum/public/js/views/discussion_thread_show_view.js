// Generated by CoffeeScript 1.6.1
(function() {
  var _this = this,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  if (typeof Backbone !== "undefined" && Backbone !== null) {
    this.DiscussionThreadShowView = (function(_super) {

      __extends(DiscussionThreadShowView, _super);

      function DiscussionThreadShowView() {
        var _this = this;
        this.unPin = function() {
          return DiscussionThreadShowView.prototype.unPin.apply(_this, arguments);
        };
        this.pin = function() {
          return DiscussionThreadShowView.prototype.pin.apply(_this, arguments);
        };
        this.togglePin = function(event) {
          return DiscussionThreadShowView.prototype.togglePin.apply(_this, arguments);
        };
        this.updateModelDetails = function() {
          return DiscussionThreadShowView.prototype.updateModelDetails.apply(_this, arguments);
        };
        this.renderPinned = function() {
          return DiscussionThreadShowView.prototype.renderPinned.apply(_this, arguments);
        };
        this.renderFlagged = function() {
          return DiscussionThreadShowView.prototype.renderFlagged.apply(_this, arguments);
        };
        return DiscussionThreadShowView.__super__.constructor.apply(this, arguments);
      }

      DiscussionThreadShowView.prototype.events = {
        "click .vote-btn": function(event) {
          return this.toggleVote(event);
        },
        "keydown .vote-btn": function(event) {
          return DiscussionUtil.activateOnSpace(event, this.toggleVote);
        },
        "click .discussion-flag-abuse": "toggleFlagAbuse",
        "keydown .discussion-flag-abuse": function(event) {
          return DiscussionUtil.activateOnSpace(event, this.toggleFlagAbuse);
        },
        "click .admin-pin": function(event) {
          return this.togglePin(event);
        },
        "keydown .admin-pin": function(event) {
          return DiscussionUtil.activateOnSpace(event, this.togglePin);
        },
        "click .action-follow": "toggleFollowing",
        "keydown .action-follow": function(event) {
          return DiscussionUtil.activateOnSpace(event, this.toggleFollowing);
        },
        "click .action-edit": "edit",
        "click .action-delete": "_delete",
        "click .action-openclose": "toggleClosed"
      };

      DiscussionThreadShowView.prototype.$ = function(selector) {
        return this.$el.find(selector);
      };

      DiscussionThreadShowView.prototype.initialize = function() {
        DiscussionThreadShowView.__super__.initialize.call(this);
        return this.model.on("change", this.updateModelDetails);
      };

      DiscussionThreadShowView.prototype.renderTemplate = function() {
        this.template = _.template($("#thread-show-template").html());
        return this.template(this.model.toJSON());
      };

      DiscussionThreadShowView.prototype.render = function() {
        this.$el.html(this.renderTemplate());
        this.delegateEvents();
        this.renderVote();
        this.renderFlagged();
        this.renderPinned();
        this.renderAttrs();
        this.$("span.timeago").timeago();
        this.convertMath();
        this.highlight(this.$(".post-body"));
        this.highlight(this.$("h1,h3"));
        return this;
      };

      DiscussionThreadShowView.prototype.renderFlagged = function() {
        var _ref;
        if ((_ref = window.user.id, __indexOf.call(this.model.get("abuse_flaggers"), _ref) >= 0) || (DiscussionUtil.isFlagModerator && this.model.get("abuse_flaggers").length > 0)) {
          this.$("[data-role=thread-flag]").addClass("flagged");
          this.$("[data-role=thread-flag]").removeClass("notflagged");
          this.$(".discussion-flag-abuse").attr("aria-pressed", "true");
          this.$(".discussion-flag-abuse").attr("data-tooltip", gettext("Click to remove report"));
          /*
          Translators: The text between start_sr_span and end_span is not shown
          in most browsers but will be read by screen readers.
          */

          return this.$(".discussion-flag-abuse .flag-label").html(interpolate(gettext("Misuse Reported%(start_sr_span)s, click to remove report%(end_span)s"), {
            "start_sr_span": "<span class='sr'>",
            "end_span": "</span>"
          }, true));
        } else {
          this.$("[data-role=thread-flag]").removeClass("flagged");
          this.$("[data-role=thread-flag]").addClass("notflagged");
          this.$(".discussion-flag-abuse").attr("aria-pressed", "false");
          return this.$(".discussion-flag-abuse .flag-label").html(gettext("Report Misuse"));
        }
      };

      DiscussionThreadShowView.prototype.renderPinned = function() {
        var pinElem, pinLabelElem;
        pinElem = this.$(".discussion-pin");
        pinLabelElem = pinElem.find(".pin-label");
        if (this.model.get("pinned")) {
          pinElem.addClass("pinned");
          pinElem.removeClass("notpinned");
          if (this.model.can("can_openclose")) {
            /*
            Translators: The text between start_sr_span and end_span is not shown
            in most browsers but will be read by screen readers.
            */

            pinLabelElem.html(interpolate(gettext("Pinned%(start_sr_span)s, click to unpin%(end_span)s"), {
              "start_sr_span": "<span class='sr'>",
              "end_span": "</span>"
            }, true));
            pinElem.attr("data-tooltip", gettext("Click to unpin"));
            return pinElem.attr("aria-pressed", "true");
          } else {
            pinLabelElem.html(gettext("Pinned"));
            pinElem.removeAttr("data-tooltip");
            return pinElem.removeAttr("aria-pressed");
          }
        } else {
          pinElem.removeClass("pinned");
          pinElem.addClass("notpinned");
          pinLabelElem.html(gettext("Pin Thread"));
          pinElem.removeAttr("data-tooltip");
          return pinElem.attr("aria-pressed", "false");
        }
      };

      DiscussionThreadShowView.prototype.updateModelDetails = function() {
        this.renderVote();
        this.renderFlagged();
        return this.renderPinned();
      };

      DiscussionThreadShowView.prototype.convertMath = function() {
        var element;
        element = this.$(".post-body");
        element.html(DiscussionUtil.postMathJaxProcessor(DiscussionUtil.markdownWithHighlight(element.text())));
        return MathJax.Hub.Queue(["Typeset", MathJax.Hub, element[0]]);
      };

      DiscussionThreadShowView.prototype.edit = function(event) {
        return this.trigger("thread:edit", event);
      };

      DiscussionThreadShowView.prototype._delete = function(event) {
        return this.trigger("thread:_delete", event);
      };

      DiscussionThreadShowView.prototype.togglePin = function(event) {
        event.preventDefault();
        if (this.model.get('pinned')) {
          return this.unPin();
        } else {
          return this.pin();
        }
      };

      DiscussionThreadShowView.prototype.pin = function() {
        var url,
          _this = this;
        url = this.model.urlFor("pinThread");
        return DiscussionUtil.safeAjax({
          $elem: this.$(".discussion-pin"),
          url: url,
          type: "POST",
          success: function(response, textStatus) {
            if (textStatus === 'success') {
              return _this.model.set('pinned', true);
            }
          },
          error: function() {
            return DiscussionUtil.discussionAlert("Sorry", "We had some trouble pinning this thread. Please try again.");
          }
        });
      };

      DiscussionThreadShowView.prototype.unPin = function() {
        var url,
          _this = this;
        url = this.model.urlFor("unPinThread");
        return DiscussionUtil.safeAjax({
          $elem: this.$(".discussion-pin"),
          url: url,
          type: "POST",
          success: function(response, textStatus) {
            if (textStatus === 'success') {
              return _this.model.set('pinned', false);
            }
          },
          error: function() {
            return DiscussionUtil.discussionAlert("Sorry", "We had some trouble unpinning this thread. Please try again.");
          }
        });
      };

      DiscussionThreadShowView.prototype.toggleClosed = function(event) {
        var $elem, closed, data, url,
          _this = this;
        $elem = $(event.target);
        url = this.model.urlFor('close');
        closed = this.model.get('closed');
        data = {
          closed: !closed
        };
        return DiscussionUtil.safeAjax({
          $elem: $elem,
          url: url,
          data: data,
          type: "POST",
          success: function(response, textStatus) {
            _this.model.set('closed', !closed);
            return _this.model.set('ability', response.ability);
          }
        });
      };

      DiscussionThreadShowView.prototype.toggleEndorse = function(event) {
        var $elem, data, endorsed, url,
          _this = this;
        $elem = $(event.target);
        url = this.model.urlFor('endorse');
        endorsed = this.model.get('endorsed');
        data = {
          endorsed: !endorsed
        };
        return DiscussionUtil.safeAjax({
          $elem: $elem,
          url: url,
          data: data,
          type: "POST",
          success: function(response, textStatus) {
            return _this.model.set('endorsed', !endorsed);
          }
        });
      };

      DiscussionThreadShowView.prototype.highlight = function(el) {
        if (el.html()) {
          return el.html(el.html().replace(/&lt;mark&gt;/g, "<mark>").replace(/&lt;\/mark&gt;/g, "</mark>"));
        }
      };

      return DiscussionThreadShowView;

    })(DiscussionContentView);
    this.DiscussionThreadInlineShowView = (function(_super) {

      __extends(DiscussionThreadInlineShowView, _super);

      function DiscussionThreadInlineShowView() {
        return DiscussionThreadInlineShowView.__super__.constructor.apply(this, arguments);
      }

      DiscussionThreadInlineShowView.prototype.renderTemplate = function() {
        var params;
        this.template = DiscussionUtil.getTemplate('_inline_thread_show');
        params = this.model.toJSON();
        if (this.model.get('username') != null) {
          params = $.extend(params, {
            user: {
              username: this.model.username,
              user_url: this.model.user_url
            }
          });
        }
        return Mustache.render(this.template, params);
      };

      return DiscussionThreadInlineShowView;

    })(DiscussionThreadShowView);
  }

}).call(this);
