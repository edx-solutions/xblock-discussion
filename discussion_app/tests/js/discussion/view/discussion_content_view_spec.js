// Generated by CoffeeScript 1.6.1
(function() {

  describe("DiscussionContentView", function() {
    beforeEach(function() {
      setFixtures("<div class=\"discussion-post\">\n    <header>\n        <a href=\"#\" class=\"vote-btn\" data-tooltip=\"vote\" role=\"button\" aria-pressed=\"false\">\n            <span class=\"plus-icon\"/><span class='votes-count-number'>0</span> <span class=\"sr\">votes (click to vote)</span></a>\n        <h1>Post Title</h1>\n        <p class=\"posted-details\">\n            <a class=\"username\" href=\"/courses/MITx/999/Robot_Super_Course/discussion/forum/users/1\">robot</a>\n            <span title=\"2013-05-08T17:34:07Z\" class=\"timeago\">less than a minute ago</span>\n        </p>\n    </header>\n    <div class=\"post-body\"><p>Post body.</p></div>\n    <div data-tooltip=\"Report Misuse\" data-role=\"thread-flag\" class=\"discussion-flag-abuse notflagged\">\n    <i class=\"icon\"></i><span class=\"flag-label\">Report Misuse</span></div>\n    <div data-tooltip=\"pin this thread\" class=\"admin-pin discussion-pin notpinned\">\n    <i class=\"icon\"></i><span class=\"pin-label\">Pin Thread</span></div>\n</div>");
      this.threadData = {
        id: '01234567',
        user_id: '567',
        course_id: 'edX/999/test',
        body: 'this is a thread',
        created_at: '2013-04-03T20:08:39Z',
        abuse_flaggers: ['123'],
        votes: {
          up_count: '42'
        },
        type: "thread",
        roles: []
      };
      this.thread = new Thread(this.threadData);
      this.view = new DiscussionContentView({
        model: this.thread
      });
      this.view.setElement($('.discussion-post'));
      return window.user = new DiscussionUser({
        id: '567',
        upvoted_ids: []
      });
    });
    it('defines the tag', function() {
      expect($('#jasmine-fixtures')).toExist;
      expect(this.view.tagName).toBeDefined;
      return expect(this.view.el.tagName.toLowerCase()).toBe('div');
    });
    it("defines the class", function() {
      return expect(this.view.model).toBeDefined();
    });
    it('is tied to the model', function() {
      return expect(this.view.model).toBeDefined();
    });
    it('can be flagged for abuse', function() {
      this.thread.flagAbuse();
      return expect(this.thread.get('abuse_flaggers')).toEqual(['123', '567']);
    });
    it('can be unflagged for abuse', function() {
      var temp_array;
      temp_array = [];
      temp_array.push(window.user.get('id'));
      this.thread.set("abuse_flaggers", temp_array);
      this.thread.unflagAbuse();
      return expect(this.thread.get('abuse_flaggers')).toEqual([]);
    });
    it('renders the vote button properly', function() {
      return DiscussionViewSpecHelper.checkRenderVote(this.view, this.thread);
    });
    it('votes correctly', function() {
      return DiscussionViewSpecHelper.checkVote(this.view, this.thread, this.threadData, false);
    });
    it('unvotes correctly', function() {
      return DiscussionViewSpecHelper.checkUnvote(this.view, this.thread, this.threadData, false);
    });
    return it('toggles the vote correctly', function() {
      return DiscussionViewSpecHelper.checkToggleVote(this.view, this.thread);
    });
  });

}).call(this);
