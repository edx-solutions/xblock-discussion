// Generated by CoffeeScript 1.6.1
(function() {

  describe("DiscussionThreadInlineView", function() {
    var assertContentVisible, assertExpandedContentVisible;
    beforeEach(function() {
      setFixtures("<script type=\"text/template\" id=\"_inline_thread\">\n    <article class=\"discussion-article\">\n        <div class=\"non-cohorted-indicator\"/>\n        <div class=\"post-body\"/>\n        <div class=\"post-extended-content\">\n            <div class=\"response-count\"/> \n            <ol class=\"responses\"/>\n            <div class=\"response-pagination\"/>\n        </div>\n        <div class=\"post-tools\">\n            <a href=\"javascript:void(0)\" class=\"expand-post\">Expand</a>\n            <a href=\"javascript:void(0)\" class=\"collapse-post\">Collapse</a>\n        </div>\n    </article>\n</script>\n<script type=\"text/template\" id=\"_inline_thread_cohorted\">\n    <article class=\"discussion-article\">\n        <div class=\"cohorted-indicator\"/>\n        <div class=\"post-body\"/>\n        <div class=\"post-extended-content\">\n            <div class=\"response-count\"/> \n            <ol class=\"responses\"/>\n            <div class=\"response-pagination\"/>\n        </div>\n        <div class=\"post-tools\">\n            <a href=\"javascript:void(0)\" class=\"expand-post\">Expand</a>\n            <a href=\"javascript:void(0)\" class=\"collapse-post\">Collapse</a>\n        </div>\n    </article>\n</script>\n<div class=\"thread-fixture\"/>");
      this.threadData = {
        id: "dummy",
        body: "dummy body",
        abuse_flaggers: [],
        votes: {
          up_count: "42"
        }
      };
      this.thread = new Thread(this.threadData);
      this.view = new DiscussionThreadInlineView({
        model: this.thread
      });
      this.view.setElement($(".thread-fixture"));
      spyOn($, "ajax");
      spyOn(this.view.showView, "render");
      spyOn(this.view.showView, "convertMath");
      spyOn(this.view, "makeWmdEditor");
      return spyOn(DiscussionThreadView.prototype, "renderResponse");
    });
    assertContentVisible = function(view, selector, visible) {
      var content;
      content = view.$el.find(selector);
      expect(content.length).toEqual(1);
      return expect(content.is(":visible")).toEqual(visible);
    };
    assertExpandedContentVisible = function(view, expanded) {
      expect(view.$el.hasClass("expanded")).toEqual(expanded);
      assertContentVisible(view, ".post-extended-content", expanded);
      assertContentVisible(view, ".expand-post", !expanded);
      return assertContentVisible(view, ".collapse-post", expanded);
    };
    describe("render", function() {
      it("uses the cohorted template if cohorted", function() {
        this.view.model.set({
          group_id: 1
        });
        this.view.render();
        return expect(this.view.$el.find(".cohorted-indicator").length).toEqual(1);
      });
      it("uses the non-cohorted template if not cohorted", function() {
        this.view.render();
        return expect(this.view.$el.find(".non-cohorted-indicator").length).toEqual(1);
      });
      it("shows content that should be visible when collapsed", function() {
        this.view.render();
        return assertExpandedContentVisible(this.view, false);
      });
      return it("does not render any responses by default", function() {
        this.view.render();
        expect($.ajax).not.toHaveBeenCalled();
        return expect(this.view.$el.find(".responses li").length).toEqual(0);
      });
    });
    return describe("expand/collapse", function() {
      it("shows/hides appropriate content", function() {
        DiscussionViewSpecHelper.setNextResponseContent({
          resp_total: 0,
          children: []
        });
        this.view.render();
        this.view.expandPost();
        assertExpandedContentVisible(this.view, true);
        this.view.collapsePost();
        return assertExpandedContentVisible(this.view, false);
      });
      return it("switches between the abbreviated and full body", function() {
        DiscussionViewSpecHelper.setNextResponseContent({
          resp_total: 0,
          children: []
        });
        this.thread.set("body", new Array(100).join("test "));
        this.view.abbreviateBody();
        expect(this.thread.get("body")).not.toEqual(this.thread.get("abbreviatedBody"));
        this.view.render();
        this.view.expandPost();
        expect(this.view.$el.find(".post-body").text()).toEqual(this.thread.get("body"));
        expect(this.view.showView.convertMath).toHaveBeenCalled();
        this.view.showView.convertMath.reset();
        this.view.collapsePost();
        expect(this.view.$el.find(".post-body").text()).toEqual(this.thread.get("abbreviatedBody"));
        return expect(this.view.showView.convertMath).toHaveBeenCalled();
      });
    });
  });

}).call(this);
