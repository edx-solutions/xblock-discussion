// Generated by CoffeeScript 1.6.1
(function() {

  this.DiscussionViewSpecHelper = (function() {

    function DiscussionViewSpecHelper() {}

    DiscussionViewSpecHelper.expectVoteRendered = function(view, voted) {
      var button;
      button = view.$el.find(".vote-btn");
      if (voted) {
        expect(button.hasClass("is-cast")).toBe(true);
        expect(button.attr("aria-pressed")).toEqual("true");
        expect(button.attr("data-tooltip")).toEqual("remove vote");
        return expect(button.text()).toEqual("43 votes (click to remove your vote)");
      } else {
        expect(button.hasClass("is-cast")).toBe(false);
        expect(button.attr("aria-pressed")).toEqual("false");
        expect(button.attr("data-tooltip")).toEqual("vote");
        return expect(button.text()).toEqual("42 votes (click to vote)");
      }
    };

    DiscussionViewSpecHelper.checkRenderVote = function(view, model) {
      view.renderVote();
      DiscussionViewSpecHelper.expectVoteRendered(view, false);
      window.user.vote(model);
      view.renderVote();
      DiscussionViewSpecHelper.expectVoteRendered(view, true);
      window.user.unvote(model);
      view.renderVote();
      return DiscussionViewSpecHelper.expectVoteRendered(view, false);
    };

    DiscussionViewSpecHelper.checkVote = function(view, model, modelData, checkRendering) {
      var _this = this;
      view.renderVote();
      if (checkRendering) {
        DiscussionViewSpecHelper.expectVoteRendered(view, false);
      }
      spyOn($, "ajax").andCallFake(function(params) {
        var newModelData;
        newModelData = {};
        $.extend(newModelData, modelData, {
          votes: {
            up_count: "43"
          }
        });
        params.success(newModelData, "success");
        return {
          always: function() {}
        };
      });
      view.vote();
      expect(window.user.voted(model)).toBe(true);
      if (checkRendering) {
        DiscussionViewSpecHelper.expectVoteRendered(view, true);
      }
      expect($.ajax).toHaveBeenCalled();
      $.ajax.reset();
      view.vote();
      expect(window.user.voted(model)).toBe(true);
      if (checkRendering) {
        DiscussionViewSpecHelper.expectVoteRendered(view, true);
      }
      return expect($.ajax).toHaveBeenCalled();
    };

    DiscussionViewSpecHelper.checkUnvote = function(view, model, modelData, checkRendering) {
      var _this = this;
      window.user.vote(model);
      expect(window.user.voted(model)).toBe(true);
      if (checkRendering) {
        DiscussionViewSpecHelper.expectVoteRendered(view, true);
      }
      spyOn($, "ajax").andCallFake(function(params) {
        var newModelData;
        newModelData = {};
        $.extend(newModelData, modelData, {
          votes: {
            up_count: "42"
          }
        });
        params.success(newModelData, "success");
        return {
          always: function() {}
        };
      });
      view.unvote();
      expect(window.user.voted(model)).toBe(false);
      if (checkRendering) {
        DiscussionViewSpecHelper.expectVoteRendered(view, false);
      }
      expect($.ajax).toHaveBeenCalled();
      $.ajax.reset();
      view.unvote();
      expect(window.user.voted(model)).toBe(false);
      if (checkRendering) {
        DiscussionViewSpecHelper.expectVoteRendered(view, false);
      }
      return expect($.ajax).toHaveBeenCalled();
    };

    DiscussionViewSpecHelper.checkToggleVote = function(view, model) {
      var event;
      event = {
        preventDefault: function() {}
      };
      spyOn(event, "preventDefault");
      spyOn(view, "vote").andCallFake(function() {
        return window.user.vote(model);
      });
      spyOn(view, "unvote").andCallFake(function() {
        return window.user.unvote(model);
      });
      expect(window.user.voted(model)).toBe(false);
      view.toggleVote(event);
      expect(view.vote).toHaveBeenCalled();
      expect(view.unvote).not.toHaveBeenCalled();
      expect(event.preventDefault.callCount).toEqual(1);
      view.vote.reset();
      view.unvote.reset();
      expect(window.user.voted(model)).toBe(true);
      view.toggleVote(event);
      expect(view.vote).not.toHaveBeenCalled();
      expect(view.unvote).toHaveBeenCalled();
      return expect(event.preventDefault.callCount).toEqual(2);
    };

    DiscussionViewSpecHelper.checkButtonEvents = function(view, viewFunc, buttonSelector) {
      var button, spy;
      spy = spyOn(view, viewFunc);
      button = view.$el.find(buttonSelector);
      button.click();
      expect(spy).toHaveBeenCalled();
      spy.reset();
      button.trigger($.Event("keydown", {
        which: 13
      }));
      expect(spy).not.toHaveBeenCalled();
      spy.reset();
      button.trigger($.Event("keydown", {
        which: 32
      }));
      return expect(spy).toHaveBeenCalled();
    };

    DiscussionViewSpecHelper.checkVoteButtonEvents = function(view) {
      return this.checkButtonEvents(view, "toggleVote", ".vote-btn");
    };

    DiscussionViewSpecHelper.setNextResponseContent = function(content) {
      var _this = this;
      return $.ajax.andCallFake(function(params) {
        params.success({
          "content": content
        });
        return {
          always: function() {}
        };
      });
    };

    return DiscussionViewSpecHelper;

  })();

}).call(this);
