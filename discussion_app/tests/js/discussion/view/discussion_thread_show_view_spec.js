// Generated by CoffeeScript 1.6.1
(function() {

  describe("DiscussionThreadShowView", function() {
    beforeEach(function() {
      setFixtures("<div class=\"discussion-post\">\n    <a href=\"#\" class=\"vote-btn\" data-tooltip=\"vote\" role=\"button\" aria-pressed=\"false\">\n        <span class=\"plus-icon\"/><span class=\"votes-count-number\">0</span> <span class=\"sr\">votes (click to vote)</span>\n    </a>\n    <div class=\"admin-pin discussion-pin notpinned\" role=\"button\" aria-pressed=\"false\" tabindex=\"0\">\n        <i class=\"icon icon-pushpin\"></i>\n        <span class=\"pin-label\">Pin Thread</span>\n    </div>\n</div>");
      window.$$course_id = "TestOrg/TestCourse/TestRun";
      window.user = new DiscussionUser({
        id: "567",
        upvoted_ids: []
      });
      this.threadData = {
        id: "dummy",
        user_id: user.id,
        course_id: $$course_id,
        body: "this is a thread",
        created_at: "2013-04-03T20:08:39Z",
        abuse_flaggers: [],
        votes: {
          up_count: "42"
        }
      };
      this.thread = new Thread(this.threadData);
      this.view = new DiscussionThreadShowView({
        model: this.thread
      });
      return this.view.setElement($(".discussion-post"));
    });
    it("renders the vote correctly", function() {
      return DiscussionViewSpecHelper.checkRenderVote(this.view, this.thread);
    });
    it("votes correctly", function() {
      return DiscussionViewSpecHelper.checkVote(this.view, this.thread, this.threadData, true);
    });
    it("unvotes correctly", function() {
      return DiscussionViewSpecHelper.checkUnvote(this.view, this.thread, this.threadData, true);
    });
    it('toggles the vote correctly', function() {
      return DiscussionViewSpecHelper.checkToggleVote(this.view, this.thread);
    });
    it("vote button activates on appropriate events", function() {
      return DiscussionViewSpecHelper.checkVoteButtonEvents(this.view);
    });
    describe("renderPinned", function() {
      describe("for an unpinned thread", function() {
        return it("renders correctly when pinning is allowed", function() {
          var pinElem;
          this.thread.updateInfo({
            ability: {
              can_openclose: true
            }
          });
          this.view.renderPinned();
          pinElem = this.view.$(".discussion-pin");
          expect(pinElem.length).toEqual(1);
          expect(pinElem).not.toHaveClass("pinned");
          expect(pinElem).toHaveClass("notpinned");
          expect(pinElem.find(".pin-label")).toHaveHtml("Pin Thread");
          expect(pinElem).not.toHaveAttr("data-tooltip");
          return expect(pinElem).toHaveAttr("aria-pressed", "false");
        });
      });
      return describe("for a pinned thread", function() {
        beforeEach(function() {
          return this.thread.set("pinned", true);
        });
        it("renders correctly when unpinning is allowed", function() {
          var pinElem;
          this.thread.updateInfo({
            ability: {
              can_openclose: true
            }
          });
          this.view.renderPinned();
          pinElem = this.view.$(".discussion-pin");
          expect(pinElem.length).toEqual(1);
          expect(pinElem).toHaveClass("pinned");
          expect(pinElem).not.toHaveClass("notpinned");
          expect(pinElem.find(".pin-label")).toHaveHtml("Pinned<span class='sr'>, click to unpin</span>");
          expect(pinElem).toHaveAttr("data-tooltip", "Click to unpin");
          return expect(pinElem).toHaveAttr("aria-pressed", "true");
        });
        return it("renders correctly when unpinning is not allowed", function() {
          var pinElem;
          this.view.renderPinned();
          pinElem = this.view.$(".discussion-pin");
          expect(pinElem.length).toEqual(1);
          expect(pinElem).toHaveClass("pinned");
          expect(pinElem).not.toHaveClass("notpinned");
          expect(pinElem.find(".pin-label")).toHaveHtml("Pinned");
          expect(pinElem).not.toHaveAttr("data-tooltip");
          return expect(pinElem).not.toHaveAttr("aria-pressed");
        });
      });
    });
    return it("pinning button activates on appropriate events", function() {
      return DiscussionViewSpecHelper.checkButtonEvents(this.view, "togglePin", ".admin-pin");
    });
  });

}).call(this);
